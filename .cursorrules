# GTS Project - Cursor Rules

## Project Setup
- This is a Nuxt 3 project with TypeScript and Tailwind CSS
- Use Node.js v22 (managed via nvm - see .nvmrc file)
- Package manager: npm (not yarn or pnpm)
- Always run `nvm use` before working on this project

## Development Guidelines

### TypeScript
- Strict TypeScript mode is enabled
- Type checking is enforced during build
- Always provide proper type annotations
- Use interfaces for object shapes
- Prefer type-safe patterns

### Nuxt 3 Conventions
- Use Nuxt 3 composition API patterns
- Leverage auto-imports for components, composables, and utilities
- Follow Nuxt directory structure conventions
- Use server-side rendering (SSR) by default
- Utilize Nuxt's built-in SEO and meta management

### Project Structure (CRITICAL)
- **DO NOT create or use `app/app.vue`** - This project uses layout-based routing
- Use `layouts/default.vue` for the main layout with navigation and structure
- Pages in `/pages` directory automatically use the default layout
- Layout contains `<slot />` where page content is rendered
- This structure ensures proper routing and content display

### Styling
- Use Tailwind CSS for all styling
- Follow Tailwind utility-first approach
- Avoid custom CSS unless absolutely necessary
- Use Tailwind's responsive design utilities
- Prefer Tailwind's semantic color palette

### Code Quality
- Keep components small and focused
- Use descriptive variable and function names
- Follow Vue 3 Composition API best practices
- Implement proper error handling
- Add JSDoc comments for complex functions

### File Organization
- Components in `/components` directory
- Pages in `/pages` directory (auto-routed)
- Layouts in `/layouts` directory
- Composables in `/composables` directory
- Server API routes in `/server/api` directory
- Types in `/types` directory

### Performance
- Optimize for Core Web Vitals
- Use Nuxt's built-in image optimization
- Implement proper lazy loading
- Minimize bundle size
- Use server-side data fetching when appropriate

### Commands
- Development: `npm run dev`
- Build: `npm run build`
- Preview: `npm run preview`
- Type check: `npm run postinstall` (generates types)

## Dependencies
- Keep dependencies minimal and up-to-date
- Prefer Nuxt modules over generic packages when available
- Document any new dependencies in commit messages

## Pull Request Process
When asked to "raise a PR" or "create a pull request", follow this complete workflow:

1. **Save All Changes First** - Ensure all modified files are saved in the editor
2. **Check Git Status** - Run `git status` to see what changes exist
3. **Add Changes** - Stage all relevant files with `git add`
4. **Commit Changes** - Create a descriptive commit message using conventional commits format
5. **Create Branch** - Create a new feature branch with descriptive name (e.g., `feature/add-authentication`, `docs/improve-readme`)
6. **Push Branch** - Push the branch to remote with `git push -u origin <branch-name>`
7. **Create PR** - Use `gh pr create` with detailed title and description explaining:
   - What changes were made
   - Why they were made
   - Any relevant context or testing notes

**Important**: Never create incomplete PRs. Always ensure all work is committed and pushed before creating the PR.
